{
  "information_for_contributors": ["Any changes made to this file should be ported over to token-patterns.ts"],
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ren'Py",
  "scopeName": "source.renpy",
  "patterns": [{ "include": "#statements" }, { "include": "#expressions" }],
  "repository": {
    "statements": {
      "patterns": [{ "include": "#renpy-statements" }, { "include": "#python-statements" }, { "include": "#keywords" }, { "include": "#say-statements" }, { "include": "#atl-keywords-old" }]
    },
    "expressions": {
      "patterns": [{ "include": "#comments" }, { "include": "#strings" }]
    },

    "python-statements": {
      "patterns": [
        {
          "comment": "Renpy python block",
          "contentName": "meta.embedded.block.python",

          "begin": "^([ \\t]+)?(?:(init)(?:[ \\t]+(-)?(\\d+))?[ \\t]+)?(python)[ \\t]*(.*)?(:)",
          "beginCaptures": {
            "1": { "name": "punctuation.whitespace.embedded.leading.renpy" },
            "2": { "name": "keyword.renpy" },
            "3": { "name": "keyword.operator.arithmetic.renpy" },
            "4": { "name": "constant.numeric.dec.renpy" },
            "5": { "name": "keyword.renpy" },
            "6": {
              "name": "meta.python.block.arguments.renpy",

              "patterns": [
                {
                  "comment": "in statement",
                  "match": "(?:\\s*(in)\\s*([a-zA-Z_]\\w*)\\b)",
                  "captures": {
                    "1": { "name": "keyword.renpy" },
                    "2": { "name": "entity.name.namespace" }
                  }
                },
                {
                  "comment": "keywords",
                  "match": "\\b(hide|early|in)\\b",
                  "name": "keyword.renpy"
                }
              ]
            },
            "7": { "name": "punctuation.section.python.begin.renpy" }
          },
          "end": "^(?!$|#)(?=(?!\\1)[ \\t]*[^ \\t#]|\\1[^ \\t#])",
          "patterns": [{ "include": "source.renpy.python" }]
        },
        {
          "comment": "Match begin and end of python one line statements",
          "contentName": "meta.embedded.line.python",
          "begin": "^[ \\t]*(\\$|define|default)(?=[ \\t])",
          "beginCaptures": {
            "1": {
              "name": "keyword.renpy"
            }
          },
          "end": "\\R$",

          "patterns": [
            {
              "comment": "Type the first name as a variable (Probably not needed, but python doesn't seem to catch it)",
              "match": "(?<!\\.)\\b([a-zA-Z_]\\w*)(?=\\s=\\s)",
              "name": "variable.other.renpy"
            },
            { "include": "source.renpy.python#expression" }
          ]
        }
      ]
    },

    "renpy-statements": {
      "patterns": [
        {
          "include": "#label"
        },
        { "include": "#menu" },
        { "include": "#image-old" },
        { "include": "#transform-old" },
        { "include": "#style-old" },
        { "include": "#use-old" },
        { "include": "#screen-old" },
        { "include": "#return-statements" },
        { "include": "#jump" },
        { "include": "#call" }
      ]
    },
    "atl": { "patterns": [] },

    "image-old": {
      "match": "^\\s*(image)\\s+([a-zA-Z_0-9 ]*)",
      "captures": {
        "1": { "name": "keyword.python.renpy" },
        "2": { "name": "entity.name.class.image.python.renpy" }
      }
    },
    "transform-old": {
      "match": "^\\s*(transform)\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": { "name": "keyword.python.renpy" },
        "2": {
          "name": "entity.name.section.python.renpy.transform.renpy"
        }
      }
    },
    "style-old": {
      "match": "^\\s*(style)\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": { "name": "keyword.python.renpy" },
        "2": {
          "name": "entity.name.tag.python.renpy.style.renpy"
        }
      }
    },
    "use-old": {
      "match": "^\\s*(use)\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": { "name": "keyword.python.renpy" },
        "2": {
          "name": "entity.name.class.python.renpy.screen.renpy"
        }
      }
    },
    "screen-old": {
      "begin": "^\\s*(screen)\\s+(?=[A-Za-z_][A-Za-z0-9_]*\\s*\\()",
      "beginCaptures": {
        "1": { "name": "keyword.python.renpy" },
        "2": {
          "name": "entity.name.class.python.renpy.screen.renpy"
        }
      },
      "end": "(\\))\\s*(?:(\\:)|(.*$\\n?))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.end.python.renpy.screen.renpy"
        },
        "2": {
          "name": "punctuation.section.function.begin.python.renpy.screen.renpy"
        },
        "3": {
          "name": "invalid.illegal.missing-section-begin.python.renpy.screen.renpy"
        }
      },
      "name": "meta.function.python.renpy.screen.renpy",
      "patterns": [
        {
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "contentName": "entity.name.function.python.renpy.screen.renpy",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [{ "include": "#entity_name_function" }]
        },
        {
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.begin.python.renpy.screen.renpy"
            }
          },
          "contentName": "meta.function.parameters.python.renpy.screen.renpy",
          "end": "(?=\\)\\s*\\:)",
          "patterns": [
            { "include": "#keyword_arguments" },
            {
              "captures": {
                "1": {
                  "name": "variable.parameter.function.python.renpy.screen.renpy"
                },
                "2": {
                  "name": "punctuation.separator.parameters.python.renpy.screen.renpy"
                }
              },
              "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)]))"
            }
          ]
        }
      ]
    },
    "atl-keywords-old": {
      "patterns": [
        {
          "match": "\\b(add|always|and|animation|as|assert|attribute|auto|bar|behind|block|break|button|camera|choice|circles|class|clear|clockwise|contains|continue|counterclockwise|def|del|drag|draggroup|event|except|exec|extend|finally|fixed|frame|function|global|grid|group|has|hbox|hotbar|hotspot|imagebutton|imagemap|import|index|input|is|key|knot|lambda|layeredimage|monologue|mousearea|music|new|nointeract|not|null|nvl|offset|old|on|onlayer|or|parallel|print|queue|raise|repeat|rpy|showif|side|stop|strings|sustain|tag|take|testcase|text|textbutton|time|timer|transclude|translate|try|use|vbar|vbox|viewport|voice|vpgrid|window|yield|zorder)\\b",
          "name": "keyword.python.renpy"
        },
        {
          "match": "\\b((?:linear|action|activate_sound|activated|adjustment|allow|allow_underfull|alpha|alternate|alternate_keysym|arguments|arrowkeys|at|auto|cache|caption|changed|child_size|clicked|cols|copypaste|default|default_focus|drag_handle|drag_joined|drag_name|drag_offscreen|drag_raise|draggable|dragged|drop_allowable|droppable|dropped|edgescroll|exclude|focus|focus_mask|ground|height|hover|hovered|icon_tooltip|id|idle|image_style|insensitive|keysym|layer|length|mask|min_overlap|modal|mouse_drop|mousewheel|pagekeys|pixel_width|predict|prefix|properties|range|repeat|rows|scope|scrollbars|selected|selected_hover|selected_idle|selected_insensitive|sensitive|slow|slow_done|spacing|style|style_group|style_prefix|style_suffix|substitute|suffix|text_style|text_tooltip|tooltip|transpose|unhovered|value|variant|width|xadjustment|xinitial|yadjustment|yinitial|zorder))\\b",
          "name": "support.function.renpy"
        },
        {
          "match": "\\b((?:|activate_|hover_|idle_|insensitive_|selected_|selected_activate_|selected_hover_|selected_idle_|selected_insensitive_)(?:additive|adjust_spacing|align|alignaround|alpha|alt|anchor|angle|antialias|area|around|background|bar_invert|bar_resizing|bar_vertical|base_bar|black_color|blend|blur|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_layout|box_reverse|box_wrap|box_wrap_spacing|caret|child|clipping|color|corner1|corner2|crop|crop_relative|debug|delay|drop_shadow|drop_shadow_color|events|first_indent|first_spacing|fit|fit_first|focus_mask|font|foreground|gl_anisostropic|gl_blend_func|gl_color_mask|gl_depth|gl_mipmap|gl_pixel_perfect|gl_texture_wrap|hinting|hyperlink_functions|italic|justify|kerning|key_events|keyboard_focus|language|layout|left_bar|left_gutter|left_margin|left_padding|line_leading|line_spacing|line_overlap_split|margin|matrixanchor|matrixcolor|matrixtransform|maximum|maxsize|mesh|mesh_pad|min_width|minimum|minwidth|mipmap|modal|mouse|nearest|newline_indent|offset|order_reverse|outline_scaling|outlines|padding|perspective|pos|radius|rest_indent|right_bar|right_gutter|right_margin|right_padding|rotate|rotate_pad|ruby_style|shader|size|size_group|slow_abortable|slow_cps|slow_cps_multiplier|sound|spacing|strikethrough|subpixel|text_align|text_y_fudge|thumb|thumb_offset|thumb_shadow|top_bar|top_gutter|top_margin|top_padding|transform_anchor|underline|unscrollable|vertical|xalign|xanchor|xanchoraround|xaround|xcenter|xfill|xfit|xmargin|xmaximum|xminimum|xoffset|xpadding|xpan|xpos|xsize|xspacing|xtile|xysize|xzoom|yalign|yanchor|yanchoraround|yaround|ycenter|yfill|yfit|ymargin|ymaximum|yminimum|yoffset|ypadding|ypan|ypos|ysize|yspacing|ytile|yzoom|zoom|zpos|zzoom))\\b",
          "name": "support.function.renpy"
        },
        {
          "match": "\\b((?:vscrollbar_|scrollbar_)(?:|activate_|hover_|idle_|insensitive_|selected_|selected_activate_|selected_hover_|selected_idle_|selected_insensitive_)(?:align|alt|anchor|area|bar_invert|bar_resizing|bar_vertical|base_bar|bottom_bar|bottom_gutter|clipping|debug|keyboard_focus|left_bar|left_gutter|maximum|minimum|mouse|offset|pos|right_bar|right_gutter|thumb|thumb_offset|thumb_shadow|top_bar|top_gutter|unscrollable|xalign|xanchor|xcenter|xfill|xmaximum|xminimum|xoffset|xpos|xsize|xysize|yalign|yanchor|ycenter|yfill|ymaximum|yminimum|yoffset|ypos|ysize))\\b",
          "name": "support.function.renpy"
        },
        {
          "match": "\\b(side_(?:|activate_|hover_|idle_|insensitive_|selected_|selected_activate_|selected_hover_|selected_idle_|selected_insensitive_)(?:align|alt|anchor|area|clipping|debug|maximum|minimum|offset|pos|spacing|xalign|xanchor|xcenter|xfill|xmaximum|xminimum|xoffset|xpos|xsize|xysize|yalign|yanchor|ycenter|yfill|ymaximum|yminimum|yoffset|ypos|ysize))\\b",
          "name": "support.function.renpy"
        },
        {
          "match": "\\b(text_(?:|activate_|hover_|idle_|insensitive_|selected_|selected_activate_|selected_hover_|selected_idle_|selected_insensitive_)(?:adjust_spacing|align|alt|anchor|antialias|area|black_color|bold|clipping|color|debug|drop_shadow|drop_shadow_color|first_indent|font|hinting|hyperlink_functions|italic|justify|kerning|language|layout|line_leading|line_spacing|line_overlap_split|maximum|min_width|minimum|minwidth|mipmap|newline_indent|offset|outline_scaling|outlines|pos|rest_indent|ruby_style|size|slow_abortable|slow_cps|slow_cps_multiplier|strikethrough|text_align|text_y_fudge|underline|vertical|xalign|xanchor|xcenter|xfill|xmaximum|xminimum|xoffset|xpos|xsize|xysize|yalign|yanchor|ycenter|yfill|ymaximum|yminimum|yoffset|ypos|ysize))\\b",
          "name": "support.function.renpy"
        },
        {
          "match": "\\b(viewport_(?:|activate_|hover_|idle_|insensitive_|selected_|selected_activate_|selected_hover_|selected_idle_|selected_insensitive_)(?:align|alt|anchor|area|clipping|debug|maximum|minimum|offset|pos|xalign|xanchor|xcenter|xfill|xmaximum|xminimum|xoffset|xpos|xsize|xysize|yalign|yanchor|ycenter|yfill|ymaximum|yminimum|yoffset|ypos|ysize))\\b",
          "name": "support.function.renpy"
        }
      ]
    },

    "say-statements": {
      "patterns": [
        {
          "contentName": "string.quoted.renpy renpy.meta.say.narrator",
          "begin": "^[ \\t]+(?=[\"'`])",
          "end": "(?<!\\\\)(?<=[\"'`])[ \\t]*(\\(.*?\\)(?![^\\(]*?\\)))?",
          "endCaptures": {
            "1": {
              "patterns": [{ "include": "source.renpy.python#function-arguments" }]
            }
          },
          "patterns": [{ "include": "#strings-base" }]
        },
        {
          "contentName": "string.quoted.renpy renpy.meta.say.$1",
          "begin": "(?<=^[ \\t]+)([a-zA-Z_]\\w*)\\b((?:[ \\t]+(?:@|\\w+))*)?[ \\t]*(?=[\"'`])",
          "beginCaptures": {
            "1": {
              "name": "meta.say.character.renpy",
              "patterns": [
                {
                  "match": "extend",
                  "name": "keyword.other.renpy"
                },
                {
                  "comment": "Match special characters",
                  "match": "adv|nvl|narrator|name_only|centered|vcentered",
                  "name": "variable.other.constant.renpy"
                },
                {
                  "match": ".*",
                  "name": "variable.character.renpy"
                }
              ]
            },
            "2": {
              "name": "meta.say.attributes.renpy",
              "patterns": [
                {
                  "name": "keyword.renpy",
                  "match": "@"
                }
              ]
            }
          },
          "end": "(?<!\\\\)(?<=[\"'`])[ \\t]*(\\(.*?\\)(?![^\\(]*?\\)))?",
          "endCaptures": {
            "1": {
              "patterns": [{ "include": "source.renpy.python#function-arguments" }]
            }
          },
          "patterns": [{ "include": "#strings-base" }]
        }
      ]
    },

    "return-statements": {
      "begin": "^[ \\t]+(return)\\b[ \\t]*",
      "end": "$",
      "captures": {
        "1": {
          "name": "keyword.control.flow.renpy"
        }
      },
      "patterns": [{ "include": "#expressions" }, { "include": "source.renpy.python#expression" }]
    },

    "call-jump-expression": {
      "begin": "\\b(?<!\\.)(expression)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.renpy"
        }
      },
      "end": "(?=\\b(?<!\\.)(?:pass|from)\\b)|$",
      "patterns": [{ "include": "#expressions" }, { "include": "source.renpy.python#expression" }]
    },

    "jump": {
      "name": "meta.jump.renpy",
      "begin": "^[ \\t]+(jump)\\b[ \\t]*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.renpy"
        }
      },
      "end": "(?!\\G)[ \\t]*(.*?)?(?=#|$)",
      "endCaptures": {
        "1": {
          "name": "invalid.illegal.renpy"
        }
      },
      "patterns": [
        { "include": "#call-jump-expression" },
        {
          "comment": "Label expression",
          "begin": "\\G",
          "end": "(?!\\G)(?![ \\t]*\\.[ \\t]*)",
          "patterns": [{ "include": "#label-access" }, { "include": "#label-name" }]
        }
      ]
    },

    "call-pass": {
      "begin": "\\b(?<!\\.)(pass)\\b[ \\t]*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.renpy"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": { "name": "punctuation.definition.arguments.end.renpy" }
      },
      "patterns": [{ "include": "source.renpy.python#function-arguments" }]
    },
    "call-from": {
      "begin": "\\b(?<!\\.)(from)\\b[ \\t]*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.renpy"
        }
      },
      "end": "(?=\\W|$)",
      "patterns": [{ "include": "#label-name" }]
    },
    "call": {
      "name": "meta.call.renpy",
      "begin": "^[ \\t]+(call)\\b[ \\t]*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.flow.renpy"
        }
      },
      "end": "(?=#|$)",
      "endCaptures": {
        "1": {
          "name": "invalid.illegal.renpy"
        }
      },
      "patterns": [
        { "include": "#call-jump-expression" },
        { "include": "#call-pass" },
        {
          "comment": "Label expression",
          "begin": "\\G",
          "end": "(?!\\G)(?![ \\t]*\\.[ \\t]*)",
          "patterns": [{ "include": "#label-call" }, { "include": "#label-access" }, { "include": "#label-name" }]
        },
        { "include": "#call-from" }
      ]
    },

    "builtin-labels": {
      "name": "support.function.builtin.renpy",
      "match": "(?<!\\.)\\b(?:start|quit|after_load|splashscreen|before_main_menu|main_menu|after_warp|hide_windows)\\b"
    },
    "label-call": {
      "comment": "Note: label params are only allowed at the end of the access expression",
      "name": "meta.function-call.label.renpy",
      "begin": "\\b(?=([a-zA-Z_]\\w*)\\s*(\\())",
      "end": "(\\))",
      "endCaptures": {
        "1": { "name": "punctuation.definition.arguments.end.renpy" }
      },
      "patterns": [{ "include": "source.renpy.python#special-variables" }, { "include": "#label-name" }, { "include": "source.renpy.python#function-arguments" }]
    },
    "label-access": {
      "comment": "Note: Labels can't be nested twice in a row!",
      "name": "meta.member.access.label.renpy",
      "begin": "(\\.)\\s*(?!\\.)",
      "end": "(?<=\\S)(?=\\W)|(^|(?<=\\s))(?=[^\\\\\\w\\s])|$",
      "beginCaptures": {
        "1": { "name": "punctuation.separator.period.renpy" }
      },
      "patterns": [{ "include": "#label-call" }, { "include": "#label-name" }]
    },
    "label-name": {
      "patterns": [{ "include": "source.renpy.python#builtin-possible-callables" }, { "include": "#builtin-labels" }, { "name": "entity.name.function.renpy", "match": "\\b(?:[a-zA-Z_]\\w*)\\b" }]
    },
    "label-def-name": {
      "comment": "Note: Labels can't be nested twice in a row!",
      "patterns": [
        { "include": "source.renpy.python#builtin-possible-callables" },
        { "include": "#builtin-labels" },
        {
          "match": "(?<=^|[ \\t])(\\b(?:[a-zA-Z_]\\w*)\\b)?(\\.)?(\\b(?:[a-zA-Z_]\\w*)\\b)",
          "captures": {
            "1": { "name": "entity.name.function.renpy" },
            "2": { "name": "punctuation.separator.period.renpy" },
            "3": { "name": "entity.name.function.renpy" }
          }
        }
      ]
    },
    "label": {
      "patterns": [
        {
          "name": "meta.label.renpy",
          "match": "^[ \\t]*(label)\\b[ \\t]*(.*?)(:)",
          "captures": {
            "1": {
              "name": "storage.type.function.renpy"
            },
            "2": {
              "patterns": [{ "include": "#label-def-name" }, { "include": "source.renpy.python#parameters" }, { "match": ".*", "name": "invalid.illegal.name.renpy" }]
            },
            "3": {
              "name": "punctuation.section.label.begin.renpy"
            }
          }
        }
      ]
    },

    "menu": {
      "name": "meta.menu.renpy",
      "contentName": "meta.block.menu.renpy",
      "begin": "^([ \\t]+)?(menu)[ \\t]*(.+)?(:)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.menu.leading.renpy"
        },
        "2": {
          "name": "storage.type.function.renpy"
        },
        "3": {
          "name": "storage.type.function.renpy",
          "patterns": [
            {
              "comment": "Menu name",
              "match": "[a-zA-Z_.]\\w*",
              "name": "entity.name.function.renpy"
            },
            { "include": "source.renpy.python#parameters" }
          ]
        },
        "4": {
          "name": "punctuation.section.menu.begin.renpy"
        }
      },
      "end": "^(?!$|#)(?=(?!\\1)[ \\t]*[^ \\t#]|\\1[^ \\t#])",
      "patterns": [{ "include": "#comments" }, { "include": "#menu-option" }, { "include": "#say-statements" }, { "include": "#menu-set" }]
    },
    "menu-set": {
      "match": "^[ \\t]+(set)[ \\t]+(.+)?",
      "captures": {
        "1": { "name": "support.function.renpy" },
        "2": {
          "name": "meta.embedded.line.python",
          "patterns": [{ "include": "source.renpy.python#expression-bare" }]
        }
      }
    },
    "menu-option": {
      "contentName": "meta.block.menu-option.renpy",
      "begin": "^([ \\t]+)?((?:\".*\")|(?:'.*')|(?:\"\"\".*\"\"\"))[ \\t]*(.+)?(:)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.menu-option.leading.renpy"
        },
        "2": {
          "name": "meta.menu-option.renpy",
          "patterns": [{ "include": "#strings" }]
        },
        "3": {
          "name": "meta.embedded.line.python",
          "patterns": [
            { "include": "source.renpy.python#parameters" },
            {
              "comment": "if condition",
              "match": "\\b(if)[ \\t]+(.+)?",
              "captures": {
                "1": { "name": "keyword.control.conditional.renpy" },
                "2": {
                  "patterns": [{ "include": "source.renpy.python#expression-bare" }]
                }
              }
            },
            {
              "match": "[^ \\t]+",
              "name": "invalid.illegal.unexpected-characters-in-menu-arguments.renpy"
            }
          ]
        },
        "4": {
          "name": "punctuation.section.menu-option.begin.renpy"
        }
      },
      "end": "^(?!$|#)(?=(?!\\1)[ \\t]*[^ \\t#]|\\1[^ \\t#])",

      "patterns": [{ "include": "#statements" }, { "include": "#expressions" }]
    },

    "keywords": {
      "patterns": [
        {
          "comment": "Control flow keywords",
          "name": "keyword.control.flow.renpy",
          "match": "\\b(?<!\\.)(?:pass|return)\\b"
        },
        {
          "comment": "Control flow keywords with block",
          "match": "\\b(?<!\\.)(?:(if|elif|else)|(for|while))\\b(.*?)(:|$)",
          "captures": {
            "1": {
              "name": "keyword.control.conditional.renpy"
            },
            "2": {
              "name": "keyword.control.flow.renpy"
            },
            "3": {
              "name": "meta.embedded.line.python",
              "patterns": [{ "include": "source.renpy.python#expression-bare" }]
            },
            "4": {
              "name": "punctuation.section.block.begin.renpy"
            }
          }
        },
        {
          "comment": "Python statement keywords",
          "match": "\\b(?<!\\.)(init|python|hide|early|in|define|default)\\b",
          "name": "keyword.renpy"
        },
        {
          "comment": "Renpy keywords",
          "match": "\\b(?<!\\.)(?:image|label|menu|nvl[ \\t]+clear|play|queue|scene|screen|show|transform)\\b",
          "name": "keyword.other.renpy"
        },
        {
          "match": "^[ \\t]+(pause)\\b[ \\t]*([^#]*)",
          "captures": {
            "1": {
              "name": "keyword.renpy"
            },
            "2": {
              "patterns": [
                {
                  "comment": "Numeric value",
                  "match": "(?<![.0])\\b([1-9]\\d*|0)(.\\d+|\\b)",
                  "name": "constant.numeric.dec.renpy"
                },
                {
                  "match": ".*",
                  "name": "invalid.illegal.dec.renpy"
                }
              ]
            }
          }
        },
        {
          "comment": "[TODO: Should probably only be a keyword in the expression] Renpy sub expression keywords",
          "name": "keyword.other.renpy",
          "match": "\\b(?<!\\.)(?:set|expression|sound|at|with|from)\\b"
        }
      ]
    },

    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.renpy",
          "match": "^[ \\t]*(#[ \\t]*(?:end)?region)\\b.*$",
          "captures": {
            "1": { "name": "punctuation.definition.tag" }
          }
        },
        {
          "name": "comment.line.number-sign.renpy",
          "match": "(#)(.*)$",
          "captures": {
            "1": { "name": "punctuation.definition.comment.renpy" },
            "2": {
              "patterns": [
                {
                  "comment": "Code Tags",
                  "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
                  "captures": { "1": { "name": "keyword.codetag.notation.renpy" } }
                }
              ]
            }
          }
        }
      ]
    },

    "strings-interior": {
      "patterns": [{ "include": "#escaped_char" }, { "include": "#string_tags" }, { "include": "#constant_placeholder" }]
    },
    "escaped_char": {
      "match": "(\\\\\")|(\\\\')|(\\\\ )|(\\\\n)|(\\\\\\\\)|(\\[\\[)|({{)",
      "captures": {
        "1": {
          "name": "constant.character.escape.double-quote.python.renpy"
        },
        "2": {
          "name": "constant.character.escape.single-quote.python.renpy"
        },
        "3": {
          "name": "constant.character.escape.space.python.renpy"
        },
        "4": {
          "name": "constant.character.escape.newline.python.renpy"
        },
        "5": {
          "name": "constant.character.escape.backslash.python.renpy"
        },
        "6": {
          "name": "constant.character.escape.placeholder.python.renpy"
        },
        "7": {
          "name": "constant.character.escape.placeholder.python.renpy"
        }
      }
    },
    "escaped_unicode_char": {
      "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})",
      "captures": {
        "1": {
          "name": "constant.character.escape.unicode.16-bit-hex.python.renpy"
        },
        "2": {
          "name": "constant.character.escape.unicode.32-bit-hex.python.renpy"
        },
        "3": {
          "name": "constant.character.escape.unicode.name.python.renpy"
        }
      }
    },
    "constant_placeholder": {
      "comment": "Python value interpolation using [ ... ]",
      "name": "meta.brackets.renpy constant.other.placeholder.tags.renpy",
      "match": "(\\[)(.*?)(\\])(?![^\\[]*?\\])",
      "captures": {
        "1": { "name": "constant.character.format.placeholder.other.renpy" },
        "2": { "name": "meta.embedded.line.python source.renpy.python#expression" },
        "3": { "name": "constant.character.format.placeholder.other.renpy" }
      }
    },
    "hex_literal": {
      "comment": "Note: This pattern has no end check. Only use as include pattern!",
      "patterns": [
        {
          "comment": "rgb, rgba, rrggbb, rrggbbaa",
          "match": "(?i)#(?:[a-f0-9]{8}|[a-f0-9]{6}|[a-f0-9]{3,4})\\b",
          "name": "support.constant.color.renpy"
        },
        {
          "match": "(?i)#[a-f0-9]+\\b",
          "name": "invalid.illegal.unexpected-number-of-hex-values.renpy"
        },
        {
          "match": "(?i)(?:#[a-f0-9]*)?(.+)",
          "name": "support.constant.color.renpy",
          "captures": {
            "1": { "name": "invalid.illegal.character-not-allowed-here.renpy" }
          }
        }
      ]
    },

    "string_tags": {
      "patterns": [
        {
          "comment": "Valid tags without params (self-closing)",
          "match": "({)\\s*(nw|done|fast|p|w|clear)\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.self-closing.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with numeric params (self-closing)",
          "name": "meta.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(p|w)(=)(\\+?)(\\d+(?:.\\d+)?)\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.self-closing.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.renpy" },
            "5": { "name": "support.constant.property-value constant.numeric.float.renpy" },
            "6": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with numeric params (self-closing)",
          "name": "meta.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(v?space)(=)(\\+?)(\\d+)\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.self-closing.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.renpy" },
            "5": { "name": "support.constant.property-value constant.numeric.integer.renpy" },
            "6": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Hashtag tag (self-closing)",
          "name": "meta.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(#)\\s*(.*?)\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.self-closing.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value string.unquoted.renpy" },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with file param",
          "name": "meta.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(font|image)(=)([\\w.]+)\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.self-closing.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value string.unquoted.renpy" },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags without params (close required)",
          "contentName": "renpy.meta.${2:/downcase}",
          "begin": "({)\\s*(u|i|b|s|plain|alt|noalt|art|rb|rt)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [{ "include": "#strings-interior" }]
        },
        {
          "comment": "Valid tags with numeric params (close required)",
          "contentName": "renpy.meta.${2:/downcase}",
          "begin": "({)\\s*(alpha|cps|k)(=)([*\\-+]?)(\\d+(?:.\\d+)?)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.renpy" },
            "5": { "name": "support.constant.property-value constant.numeric.renpy" },
            "6": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.${2:/downcase}.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.${2:/downcase}.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [{ "include": "#strings-interior" }]
        },
        {
          "comment": "Valid tags with numeric params (close required)",
          "contentName": "renpy.meta.${2:/downcase}",
          "begin": "({)\\s*(size)(=)([\\-+]?)(\\d+)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.renpy" },
            "5": { "name": "support.constant.property-value constant.numeric.integer.renpy" },
            "6": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.${2:/downcase}.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.${2:/downcase}.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [{ "include": "#strings-interior" }]
        },
        {
          "comment": "Color tag",
          "contentName": "renpy.meta.${2:/downcase}.${4:/downcase}",
          "begin": "({)\\s*(color|outlinecolor)(=)(#?[a-zA-Z0-9]+)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "name": "support.constant.property-value",
              "patterns": [{ "include": "#hex_literal" }]
            },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.${2:/downcase}.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.${2:/downcase}.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [{ "include": "#strings-interior" }]
        },
        {
          "comment": "a tag",
          "contentName": "renpy.meta.${2:/downcase}",
          "begin": "({)\\s*(a)(=)(.*?)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "name": "support.constant.property-value string.unquoted.renpy",
              "patterns": []
            },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.${2:/downcase}.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.${2:/downcase}.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [{ "include": "#strings-interior" }]
        },
        {
          "comment": "Unknown tag (Single line support only cus \\R does not work) (Since we don't know if a tag is self closing, we can't assume that an end pattern exists)",
          "match": "({)[ \\t]*(\\w+)\\b(?:(=)(.*?))?\\s*(})((?:.|\\R)+?)\\s*({/)\\s*(\\2)\\s*(})",
          "captures": {
            "1": { "name": "meta.tag.${2:/downcase}.start.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "renpy.meta.u meta.tag.${2:/downcase}.start.renpy entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "meta.tag.${2:/downcase}.start.renpy punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "meta.tag.${2:/downcase}.start.renpy constant.other.placeholder.tags.renpy" },
            "5": { "name": "meta.tag.${2:/downcase}.start.renpy punctuation.definition.tag.end.renpy" },
            "6": {
              "name": "renpy.meta.tag.custom.${2:/downcase}",
              "patterns": [{ "include": "#strings-interior" }]
            },
            "7": { "name": "meta.tag.${2:/downcase}.end.renpy punctuation.definition.tag.begin.renpy" },
            "8": { "name": "renpy.meta.u meta.tag.${2:/downcase}.end.renpy entity.name.tag.${2:/downcase}.renpy" },
            "9": { "name": "meta.tag.${2:/downcase}.end.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Unknown tag start",
          "match": "({)\\s*(\\w*)(?:(=)(.*?))?\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "renpy.meta.u entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "name": "support.constant.property-value constant.other.placeholder.tags.renpy",
              "patterns": []
            },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Unknown tag end",
          "match": "({/)\\s*(\\w*?)\\b\\s*(})",
          "captures": {
            "0": { "name": "meta.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "renpy.meta.u entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          }
        }
      ]
    },

    "strings-base": {
      "begin": "\"\"\"|\"|'''|'|```|`",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.renpy" }
      },
      "end": "(?<!\\\\)(((?<=\\0)\\0)|\\0)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.string.end.renpy" },
        "2": { "name": "meta.empty-string.renpy" }
      },
      "patterns": [{ "include": "#strings-interior" }]
    },

    "strings": {
      "name": "string.quoted.renpy",
      "begin": "\"\"\"|\"|'''|'|```|`",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.renpy" }
      },
      "end": "(?<!\\\\)(((?<=\\0)\\0)|\\0)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.string.end.renpy" },
        "2": { "name": "meta.empty-string.renpy" }
      },
      "patterns": [{ "include": "#strings-interior" }]
    }
  }
}
