{
  "name": "Ren'Py",
  "scopeName": "source.renpy",
  "firstLineMatch": "^#!/.*\\brenpy\\b",
  "patterns": [
    { "include": "#statements" },
    { "include": "#expressions" }
  ],
  "repository": {
    "statements": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#renpy-statements" },
        { "include": "#python-statements" },
        { "include": "#keywords" }
      ]
    },
    "expressions": {
      "patterns": [
        { "include": "#strings" }
      ]
    },

    "python-statements": {
      "patterns": [
        {
          "comment": "Renpy python block",
          "contentName": "meta.embedded.block.python",

          "begin": "(^[ \\t]+)?\\b(?:(init) (?:(-)?(\\d*) )?)?(python)([\\w \\t]*)(:)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.python"
            },
            "2": {
              "comment": "init",
              "name": "keyword.renpy"
            },
            "3": {
              "comment": "- sign",
              "name": "keyword.operator.arithmetic.python"
            },
            "4": {
              "comment": "init priority numeric",
              "name": "constant.numeric.dec.python"
            },
            "5": {
              "comment": "python",
              "name": "keyword.renpy"
            },
            "6": {
              "comment": "Statement options",
              "name": "meta.embedded.block.python.options",

              "patterns": [
                {
                  "comment": "in statement",
                  "match": "(?: (in) ([a-zA-Z_]\\w+))",
                  "captures":
                  {
                    "1": {
                      "comment": "in",
                      "name": "keyword.renpy"
                    },
                    "2": {
                      "comment": "namespace",
                      "name": "entity.name.namespace"
                    }
                  }
                },
                {
                  "comment": "keywords",
                  "match": "\\b(hide|early|in)\\b",
                  "name": "keyword.renpy"
                }
              ]
            },
            "7": {
              "name": "punctuation.section.python.begin.renpy"
            }
          },
          "end":"^(?!(\\1[ \\t]+)|($))",
          "patterns": [{ "include": "source.python" }]
        },
        {
          "comment": "Match begin and end of python one line statements",
          "contentName": "meta.embedded.line.python",
          "begin": "(\\$|\\bdefine|\\bdefault)(?=\\s)",
          "beginCaptures": {
            "1": {
              "name": "keyword.renpy"
            }
          },
          "end": "\\R$",

          "patterns": [
            {
              "comment": "Type the first name as a variable (Probably not needed, but python doesn't seem to catch it)",
              "match": "(?<!\\.)\\b(\\w+)(?=\\s=\\s)",
              "name": "variable.other.python"
            },
            { "include": "source.python" }
          ]
        }
      ]
    },

    "renpy-statements": {
      "patterns": [
        { "include": "#label" }
      ]
    },

    "label": {
      "patterns": [
        {
          "name": "meta.label.renpy",
          "begin": "(^[ \\t]+)?\\b(label)\\s+([a-zA-Z_.]\\w*(?:\\(.*\\))?)(?=\\s*)(:)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.label.leading.renpy"
            },
            "2": {
              "name": "keyword.renpy storage.type.function.renpy"
            },
            "3":{
              "name": "meta.label.renpy",
              "patterns": [
                {
                  "comment": "Function name",
                  "match": "([a-zA-Z_.]\\w*)",
                  "name": "entity.name.function.renpy"
                },
                { "include": "source.python#parameters" }
              ]
            },
            "4": {
              "name": "punctuation.section.label.begin.renpy"
            }
          },

          "end": "(:|(?=[#'\"\\n]))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.label.begin.renpy"
            }
          }
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "comment": "Python statement keywords",
          "match": "\\b(init|python|hide|early|in|define|default)\\b",
          "name": "keyword.renpy"
        },
        {
          "comment": "Renpy keywords",
          "match": "\\b(label|play|pause|screen|scene|show|image|transform)\\b",
          "name": "keyword.other.renpy"
        },
        {
          "comment": "Conditional control flow keywords",
          "match": "\\b(if|elif|else)\\b",
          "name": "keyword.control.conditional.renpy"
        },
        {
          "comment": "Control flow keywords",
          "match": "\\b(for|while|pass|return|menu|jump|call)\\b",
          "name": "keyword.control.renpy"
        },
        {
          "comment": "[TODO: Should probably only be a keyword in the expression]Renpy sub expression keywords",
          "match": "\\b(set|expression|pass|sound|at|with|from)\\b",
          "name": "keyword.other.renpy"
        }
      ]
    },

    "code-tags": {
      "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
      "captures": { "1": { "name": "keyword.codetag.notation.renpy" } }
    },
    "comments": {
      "name": "comment.line.number-sign.renpy",
      "begin": "(\\#)",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.comment.renpy" }
      },
      "end": "($)",
      "patterns": [{ "include": "#code-tags" }]
    },

    "strings": {
      "patterns": [
        { "include": "#string-quoted-double" },
        { "include": "#string-quoted-single" },
        { "include": "#string-quoted-back" }
      ]
    },

    "escaped_char": {
      "comment": "\\(\\x[0-9A-F]{2})|(\\[0-7]{3})|(\\\\)|(\\\")|(\\')|(\\a)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\v)|(\\{|\\\\[)",
      "match": "(\\\\\")|(\\\\')|(\\\\ )|(\\\\n)|(\\\\\\\\)|(\\[\\[)|({{)",
      "captures": {
        "1": {
          "name": "constant.character.escape.double-quote.python.renpy"
        },
        "2": {
          "name": "constant.character.escape.single-quote.python.renpy"
        },
        "3": {
          "name": "constant.character.escape.space.python.renpy"
        },
        "4": {
          "name": "constant.character.escape.newline.python.renpy"
        },
        "5": {
          "name": "constant.character.escape.backslash.python.renpy"
        },
        "6": {
          "name": "constant.character.escape.placeholder.python.renpy"
        },
        "7": {
          "name": "constant.character.escape.placeholder.python.renpy"
        }
      }
    },
    "escaped_unicode_char": {
      "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})",
      "captures": {
        "1": {
          "name": "constant.character.escape.unicode.16-bit-hex.python.renpy"
        },
        "2": {
          "name": "constant.character.escape.unicode.32-bit-hex.python.renpy"
        },
        "3": {
          "name": "constant.character.escape.unicode.name.python.renpy"
        }
      }
    },
    "constant_placeholder": {
      "patterns": [
        { "include": "#string_tags"},
        {
          "comment": "Python constant placeholder",
          "name": "meta.brackets.renpy constant.other.placeholder.tags.renpy",
          "contentName": "source.python",
          "begin": "\\[",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.tag.begin.renpy" }
          },
          "end": "\\]",
          "endCaptures": {
            "0": { "name": "punctuation.definition.tag.end.renpy" }
          }
        }
      ]
    },

    "string_tags": {
      "patterns": [
        {
          "comment": "Italic string",
          "name": "meta.format.string.renpy",
          "begin": "(?i)({)(i)(?=\\s|})",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.start.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.i.renpy"
            }
          },
          "end": "(?i)({/)(i)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.i.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [
            {
              "name": "meta.tag.attributes.start.renpy",
              "begin": "\\G",
              "end": "(})",
              "captures": {
                "1": {
                  "name": "punctuation.definition.tag.end.renpy"
                }
              }
            },
            {
              "begin": "(?!\\G)",
              "end": "(?={/(?i:i))",
              "name": "markup.italic.renpy",
              "patterns": [
                  { "include": "#escaped_char" },
                  { "include": "#constant_placeholder" }
              ]
            }
          ]
        },
        {
          "comment": "Bold string",
          "name": "meta.format.string.renpy",
          "begin": "(?i)({)(b)(?=\\s|})",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.start.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.b.renpy"
            }
          },
          "end": "(?i)({/)(b)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.b.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [
            {
              "name": "meta.tag.attributes.start.renpy",
              "begin": "\\G",
              "end": "(})",
              "captures": {
                "1": {
                  "name": "punctuation.definition.tag.end.renpy"
                }
              }
            },
            {
              "begin": "(?!\\G)",
              "end": "(?={/(?i:b))",
              "name": "meta.tag.b.renpy markup.bold.renpy",
              "patterns": [
                { "include": "#escaped_char" },
                { "include": "#constant_placeholder" }
              ]
            }
          ]
        },
        {
          "comment": "Underline string",
          "name": "meta.format.string.renpy",
          "begin": "(?i)({)(u)(?=\\s|})",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.start.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.u.renpy"
            }
          },
          "end": "(?i)({/)(u)\\s*(})",
          "endCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.end.renpy"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.renpy"
            },
            "2": {
              "name": "entity.name.tag.u.renpy"
            },
            "3": {
              "name": "punctuation.definition.tag.end.renpy"
            }
          },
          "patterns": [
            {
              "name": "meta.tag.attributes.start.renpy",
              "begin": "\\G",
              "end": "(})",
              "captures": {
                "1": {
                  "name": "punctuation.definition.tag.end.renpy"
                }
              }
            },
            {
              "begin": "(?!\\G)",
              "end": "(?={/(?i:u))",
              "name": "meta.tag.u.renpy markup.underline.renpy",
              "patterns": [
                { "include": "#escaped_char" },
                { "include": "#constant_placeholder" }
              ]
            }
          ]
        },
        {
          "comment": "Custom tag string (Single line support only cus \\R does not work)",
          "name": "meta.format.string.renpy",

          "match": "({)(?!\/)(\\w*)([^}]*)(})((?:.|\\R)+?)({\/)(\\2)(})",
          "captures": {
            "1": { "name": "meta.tag.metadata.style.start.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "meta.tag.metadata.style.start.renpy entity.name.tag.$2.renpy" },
            "3": { "name": "meta.tag.metadata.style.start.renpy meta.tag.attributes.start.renpy" },
            "4": { "name": "meta.tag.metadata.style.start.renpy punctuation.definition.tag.end.renpy" },
            "5": {
              "name": "meta.tag.$2.renpy",
              "patterns": [
                { "include": "#escaped_char" },
                { "include": "#constant_placeholder" }
              ]
            },
            "6": { "name": "meta.tag.metadata.style.end.renpy punctuation.definition.tag.begin.renpy" },
            "7": { "name": "meta.tag.metadata.style.end.renpy entity.name.tag.$2.renpy" },
            "8": { "name": "meta.tag.metadata.style.end.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Start tag",
          "name": "markup.underline meta.braces.renpy constant.other.placeholder.tags.renpy",
          "contentName": "meta.tag.self-closing.renpy",
          "match": "({)(?!\/)(\\w*)([^}]*)(})",
          "captures": {
            "0": { "name": "meta.tag.metadata.style.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.$2.renpy" },
            "3": { "name": "meta.tag.attributes.start.renpy" },
            "4": { "name": "punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "End tag",
          "name": "markup.underline meta.braces.renpy constant.other.placeholder.tags.renpy",
          "contentName": "meta.tag.self-closing.renpy",
          "match": "({\/)(\\w*)([^}]*)(})",
          "captures": {
            "0": { "name": "meta.tag.metadata.style.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.$2.renpy" },
            "3": { "name": "meta.tag.attributes.start.renpy" },
            "4": { "name": "punctuation.definition.tag.end.renpy" }
          }
        }
      ]
    },

    "string-quoted-double": {
      "patterns": [
        {
          "comment": "Triple quoted block string",
          "name": "string.quoted.triple.block.renpy",
          "begin": "(\"\"\")",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<!\\\\)((?<=\"\"\")(\")\"\"|\"\"\")",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.triple.block.renpy" }
          },
          "patterns": [
            { "include": "#escaped_char" },
            { "include": "#constant_placeholder" }
          ]
        },
        {
          "comment": "Double quoted single line string",
          "name": "string.quoted.double.line.renpy",
          "begin": "(\")",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<!\\\\)((?<=\")(\")|\")",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.double.renpy" },
            "3": { "name": "invalid.illegal.unclosed-string.renpy" }
          },
          "patterns": [
            { "include": "#escaped_char" },
            { "include": "#constant_placeholder" }
          ]
        }
      ]
    },
    "string-quoted-single": {
      "patterns": [
        {
          "comment": "Single quoted block string",
          "name": "string.quoted.single.block.renpy",
          "begin": "(''')",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<!\\\\)((?<=''')('|''')|''')",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.single.block.renpy" }
          },
          "patterns": [
            { "include": "#escaped_char" },
            { "include": "#constant_placeholder" }
          ]
        },
        {
          "comment": "Single quoted single line string",
          "name": "string.quoted.single.line.renpy",
          "begin": "(')",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<!\\\\)((?<=')(')|')",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.single.renpy" },
            "3": { "name": "invalid.illegal.unclosed-string.renpy" }
          },
          "patterns": [
            { "include": "#escaped_char" },
            { "include": "#constant_placeholder" }
          ]
        }
      ]
    },
    "string-quoted-back": {
      "patterns": [
        {
          "comment": "Back quoted block string",
          "name": "string.quoted.back.block.renpy",
          "begin": "(```)",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<!\\\\)((?<=```)(`)``|```)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.back.block.renpy" }
          },
          "patterns": [
            { "include": "#escaped_char" },
            { "include": "#constant_placeholder" }
          ]
        },
        {
          "comment": "Back quoted single line string",
          "name": "string.quoted.back.line.renpy",
          "begin": "(`)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<!\\\\)((?<=`)(`)|`)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.back.renpy" },
            "3": { "name": "invalid.illegal.unclosed-string.renpy" }
          },
          "patterns": [
            { "include": "#escaped_char" },
            { "include": "#constant_placeholder" }
          ]
        }
      ]
    }
  }
}
